name: ci-cd
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}
      # https://github.com/marketplace/actions/python-poetry-action
      
    - name: Install poetry
      uses: abatilo/actions-poetry@v2

    - uses: actions/cache@v3
      name: Define a cache for the virtual environment based on the dependencies lock file
      with:
        path: ./.venv
        key: venv-${{ hashFiles('poetry.lock') }}

    - name: Install the project dependencies
      run: poetry install

    - name: Run pytest
      run: poetry run pytest -v

    - name: Install the code linting and formatting tool Ruff
      run: pipx install ruff

    - name: Lint code with Ruff
      run: ruff check --output-format=github --target-version=py39
      
    - name: Check code formatting with Ruff
      run: ruff format --diff --target-version=py39
      continue-on-error: true


  deploy-mkdocs-to-gh-pages:
    needs: build-and-test # wait for build to finish before deploying
    permissions:
      contents: write # needed for gh-deploy 
      id-token: write
    
    # only deploy on push to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main '
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Configure Git Credentials
        run: |
          git config user.name github-actions[bot]
          git config user.email 41898282+github-actions[bot]@users.noreply.github.com

      - uses: actions/setup-python@v5
        with:
          python-version: 3.x
      - run: echo "cache_id=$(date --utc '+%V')" >> $GITHUB_ENV 
      
      - uses: actions/cache@v4
        with:
          key: mkdocs-material-${{ env.cache_id }}
          path: .cache
          restore-keys: |
            mkdocs-material-
      - run: |
          pip install mkdocs-material mkdocstrings mkdocstrings-python
          mkdocs gh-deploy --force

  deployment:
    needs: build-and-test
    # Only run this job if new work is pushed to "main"
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write # essential for publishing to test pypi
    steps:
      - uses: actions/checkout@v4
      
      - name: Install poetry
        uses: abatilo/actions-poetry@v2

      # cacheing the virtual environment to speed up the build process
      - uses: actions/cache@v3
        name: Define a cache for the virtual environment based on the dependencies lock file
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}

      - name: Install the project dependencies
        run: poetry install

      # this step will automatically update the pyproject.toml version
      # additionally it will also automatically add some changelog entries
      # and create a release on GitHub
      - name: Use Python Semantic Release to prepare release
        id: release
        uses: python-semantic-release/python-semantic-release@v8.3.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
        
      - name: Publish to Test PyPI
        # only publish to test pypi if the release was successful
        if: steps.release.outputs.released == 'true'
        env:
          TEST_PYPI_API_TOKEN: ${{ secrets.TEST_PYPI_API_TOKEN }}
        run: |
          poetry config repositories.test-pypi https://test.pypi.org/legacy/
          poetry config pypi-token.test-pypi "${{ secrets.TEST_PYPI_API_TOKEN }}"
          poetry build
          poetry publish --repository test-pypi
    
      - uses: actions/checkout@v4
      - name: Check published to Test PyPI
      # extra index url is needed to make sure that dependencies 
      # can be installed if they do not exist in test pypi  
        run: |
          pip install \
          --index-url https://test.pypi.org/simple/ \
          --extra-index-url https://pypi.org/simple
          smelter_optimisation

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        if: steps.release.outputs.released == 'true'
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Publish package distributions to GitHub Releases
        uses: python-semantic-release/upload-to-gh-release@main
        if: steps.release.outputs.released == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}